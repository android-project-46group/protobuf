// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/android-project-46group/protobuf/gen/go/protobuf (interfaces: DownloadClient,Download_DownloadMembersZipClient,DownloadServer,Download_DownloadMembersZipServer)

// Package mockpb is a generated GoMock package.
package mockpb

import (
	context "context"
	reflect "reflect"

	protobuf "github.com/android-project-46group/protobuf/gen/go/protobuf"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDownloadClient is a mock of DownloadClient interface.
type MockDownloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadClientMockRecorder
}

// MockDownloadClientMockRecorder is the mock recorder for MockDownloadClient.
type MockDownloadClientMockRecorder struct {
	mock *MockDownloadClient
}

// NewMockDownloadClient creates a new mock instance.
func NewMockDownloadClient(ctrl *gomock.Controller) *MockDownloadClient {
	mock := &MockDownloadClient{ctrl: ctrl}
	mock.recorder = &MockDownloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadClient) EXPECT() *MockDownloadClientMockRecorder {
	return m.recorder
}

// DownloadMembersZip mocks base method.
func (m *MockDownloadClient) DownloadMembersZip(arg0 context.Context, arg1 *protobuf.DownloadMembersZipRequest, arg2 ...grpc.CallOption) (protobuf.Download_DownloadMembersZipClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadMembersZip", varargs...)
	ret0, _ := ret[0].(protobuf.Download_DownloadMembersZipClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadMembersZip indicates an expected call of DownloadMembersZip.
func (mr *MockDownloadClientMockRecorder) DownloadMembersZip(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMembersZip", reflect.TypeOf((*MockDownloadClient)(nil).DownloadMembersZip), varargs...)
}

// Health mocks base method.
func (m *MockDownloadClient) Health(arg0 context.Context, arg1 *protobuf.HealthRequest, arg2 ...grpc.CallOption) (*protobuf.HealthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Health", varargs...)
	ret0, _ := ret[0].(*protobuf.HealthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockDownloadClientMockRecorder) Health(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDownloadClient)(nil).Health), varargs...)
}

// MockDownload_DownloadMembersZipClient is a mock of Download_DownloadMembersZipClient interface.
type MockDownload_DownloadMembersZipClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownload_DownloadMembersZipClientMockRecorder
}

// MockDownload_DownloadMembersZipClientMockRecorder is the mock recorder for MockDownload_DownloadMembersZipClient.
type MockDownload_DownloadMembersZipClientMockRecorder struct {
	mock *MockDownload_DownloadMembersZipClient
}

// NewMockDownload_DownloadMembersZipClient creates a new mock instance.
func NewMockDownload_DownloadMembersZipClient(ctrl *gomock.Controller) *MockDownload_DownloadMembersZipClient {
	mock := &MockDownload_DownloadMembersZipClient{ctrl: ctrl}
	mock.recorder = &MockDownload_DownloadMembersZipClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownload_DownloadMembersZipClient) EXPECT() *MockDownload_DownloadMembersZipClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDownload_DownloadMembersZipClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDownload_DownloadMembersZipClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDownload_DownloadMembersZipClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDownload_DownloadMembersZipClient) Recv() (*protobuf.DownloadMembersZipReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protobuf.DownloadMembersZipReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDownload_DownloadMembersZipClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockDownload_DownloadMembersZipClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDownload_DownloadMembersZipClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDownload_DownloadMembersZipClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDownload_DownloadMembersZipClient)(nil).Trailer))
}

// MockDownloadServer is a mock of DownloadServer interface.
type MockDownloadServer struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadServerMockRecorder
}

// MockDownloadServerMockRecorder is the mock recorder for MockDownloadServer.
type MockDownloadServerMockRecorder struct {
	mock *MockDownloadServer
}

// NewMockDownloadServer creates a new mock instance.
func NewMockDownloadServer(ctrl *gomock.Controller) *MockDownloadServer {
	mock := &MockDownloadServer{ctrl: ctrl}
	mock.recorder = &MockDownloadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadServer) EXPECT() *MockDownloadServerMockRecorder {
	return m.recorder
}

// DownloadMembersZip mocks base method.
func (m *MockDownloadServer) DownloadMembersZip(arg0 *protobuf.DownloadMembersZipRequest, arg1 protobuf.Download_DownloadMembersZipServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadMembersZip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadMembersZip indicates an expected call of DownloadMembersZip.
func (mr *MockDownloadServerMockRecorder) DownloadMembersZip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMembersZip", reflect.TypeOf((*MockDownloadServer)(nil).DownloadMembersZip), arg0, arg1)
}

// Health mocks base method.
func (m *MockDownloadServer) Health(arg0 context.Context, arg1 *protobuf.HealthRequest) (*protobuf.HealthReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.HealthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockDownloadServerMockRecorder) Health(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDownloadServer)(nil).Health), arg0, arg1)
}

// mustEmbedUnimplementedDownloadServer mocks base method.
func (m *MockDownloadServer) mustEmbedUnimplementedDownloadServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDownloadServer")
}

// mustEmbedUnimplementedDownloadServer indicates an expected call of mustEmbedUnimplementedDownloadServer.
func (mr *MockDownloadServerMockRecorder) mustEmbedUnimplementedDownloadServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDownloadServer", reflect.TypeOf((*MockDownloadServer)(nil).mustEmbedUnimplementedDownloadServer))
}

// MockDownload_DownloadMembersZipServer is a mock of Download_DownloadMembersZipServer interface.
type MockDownload_DownloadMembersZipServer struct {
	ctrl     *gomock.Controller
	recorder *MockDownload_DownloadMembersZipServerMockRecorder
}

// MockDownload_DownloadMembersZipServerMockRecorder is the mock recorder for MockDownload_DownloadMembersZipServer.
type MockDownload_DownloadMembersZipServerMockRecorder struct {
	mock *MockDownload_DownloadMembersZipServer
}

// NewMockDownload_DownloadMembersZipServer creates a new mock instance.
func NewMockDownload_DownloadMembersZipServer(ctrl *gomock.Controller) *MockDownload_DownloadMembersZipServer {
	mock := &MockDownload_DownloadMembersZipServer{ctrl: ctrl}
	mock.recorder = &MockDownload_DownloadMembersZipServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownload_DownloadMembersZipServer) EXPECT() *MockDownload_DownloadMembersZipServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDownload_DownloadMembersZipServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockDownload_DownloadMembersZipServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockDownload_DownloadMembersZipServer) Send(arg0 *protobuf.DownloadMembersZipReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDownload_DownloadMembersZipServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockDownload_DownloadMembersZipServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockDownload_DownloadMembersZipServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDownload_DownloadMembersZipServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDownload_DownloadMembersZipServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDownload_DownloadMembersZipServer)(nil).SetTrailer), arg0)
}
