// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: donload.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DownloadClient is the client API for Download service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadClient interface {
	// ヘルスチェックを行うエンドポイント。
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error)
	// 写真も含むメンバー情報一覧を Zip でダウンロードするエンドポイント。
	DownloadMembersZip(ctx context.Context, in *DownloadMembersZipRequest, opts ...grpc.CallOption) (Download_DownloadMembersZipClient, error)
}

type downloadClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadClient(cc grpc.ClientConnInterface) DownloadClient {
	return &downloadClient{cc}
}

func (c *downloadClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, "/download.service.Download/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadClient) DownloadMembersZip(ctx context.Context, in *DownloadMembersZipRequest, opts ...grpc.CallOption) (Download_DownloadMembersZipClient, error) {
	stream, err := c.cc.NewStream(ctx, &Download_ServiceDesc.Streams[0], "/download.service.Download/DownloadMembersZip", opts...)
	if err != nil {
		return nil, err
	}
	x := &downloadDownloadMembersZipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Download_DownloadMembersZipClient interface {
	Recv() (*DownloadMembersZipReply, error)
	grpc.ClientStream
}

type downloadDownloadMembersZipClient struct {
	grpc.ClientStream
}

func (x *downloadDownloadMembersZipClient) Recv() (*DownloadMembersZipReply, error) {
	m := new(DownloadMembersZipReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloadServer is the server API for Download service.
// All implementations must embed UnimplementedDownloadServer
// for forward compatibility
type DownloadServer interface {
	// ヘルスチェックを行うエンドポイント。
	Health(context.Context, *HealthRequest) (*HealthReply, error)
	// 写真も含むメンバー情報一覧を Zip でダウンロードするエンドポイント。
	DownloadMembersZip(*DownloadMembersZipRequest, Download_DownloadMembersZipServer) error
	mustEmbedUnimplementedDownloadServer()
}

// UnimplementedDownloadServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadServer struct {
}

func (UnimplementedDownloadServer) Health(context.Context, *HealthRequest) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDownloadServer) DownloadMembersZip(*DownloadMembersZipRequest, Download_DownloadMembersZipServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMembersZip not implemented")
}
func (UnimplementedDownloadServer) mustEmbedUnimplementedDownloadServer() {}

// UnsafeDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServer will
// result in compilation errors.
type UnsafeDownloadServer interface {
	mustEmbedUnimplementedDownloadServer()
}

func RegisterDownloadServer(s grpc.ServiceRegistrar, srv DownloadServer) {
	s.RegisterService(&Download_ServiceDesc, srv)
}

func _Download_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/download.service.Download/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Download_DownloadMembersZip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadMembersZipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloadServer).DownloadMembersZip(m, &downloadDownloadMembersZipServer{stream})
}

type Download_DownloadMembersZipServer interface {
	Send(*DownloadMembersZipReply) error
	grpc.ServerStream
}

type downloadDownloadMembersZipServer struct {
	grpc.ServerStream
}

func (x *downloadDownloadMembersZipServer) Send(m *DownloadMembersZipReply) error {
	return x.ServerStream.SendMsg(m)
}

// Download_ServiceDesc is the grpc.ServiceDesc for Download service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Download_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "download.service.Download",
	HandlerType: (*DownloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Download_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadMembersZip",
			Handler:       _Download_DownloadMembersZip_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "donload.proto",
}
